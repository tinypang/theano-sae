data set is ./spectrogram/GTZAN_genre/3sec_50x20_gs
Xdim:50, Ydim:20, Hidden Layers:[600, 300, 100], nOutputs:50, Batch size:20, pretraining epochs:25, pretrain learning rate:0.001, finetuning learning rate:0.1, training epochs:2000, corruption levels per layer:[0.4, 0.3, 0.2], validation improvement threshold:0.995,dataset type:spec
input type: specpca:False, pca components:0
(0, 'metal')(1, 'country')(2, 'pop')(3, 'classical')(4, 'rock')(5, 'blues')(6, 'hiphop')(7, 'reggae')(8, 'disco')(9, 'jazz')
[[184   4   0   7  43   5  13   0  12   4]
 [  9  88  34  27  27  13  16   3  30  63]
 [  0  12 150  12   3   0  53   7  35   9]
 [  1  17  15 220  11   1   3   0   6  42]
 [ 35  33  25  15  63   8  32   6  48  39]
 [ 41  27   1  18  51  90   6   4  13  66]
 [ 29  20  30   2  21  11 118  10  52  13]
 [  7  40  48   4   9   5  83  28  38  27]
 [ 20  16  45   4  29   5  36   5 138   7]
 [  7  42  31  45  17  10  20   7  20 101]]
Optimization complete with best validation score of 57.500000 %,with test performance 60.666667 %
The training code for file train_stacked_ae.py ran for 8.44m
------------------------

data set is ./spectrogram/GTZAN_genre/3sec_50x20_gs
Xdim:50, Ydim:20, Hidden Layers:[600, 300, 100], nOutputs:50, Batch size:20, pretraining epochs:25, pretrain learning rate:0.001, finetuning learning rate:0.1, training epochs:2000, corruption levels per layer:[0.4, 0.3, 0.2], validation improvement threshold:0.995,dataset type:spec
input type: specpca:False, pca components:0
(0, 'metal')(1, 'country')(2, 'pop')(3, 'classical')(4, 'rock')(5, 'blues')(6, 'hiphop')(7, 'reggae')(8, 'disco')(9, 'jazz')
Optimization complete with best validation score of 59.700000 %,with test performance 60.266667 %
The training code for file train_stacked_ae.py ran for 3.37m
[[202   2   0   6  20  34  12   2  22   0]
 [  5  57  20  34  20   8  12  55  27  62]
 [  0  20 123  14   1   0  21  68  48   5]
 [  1   4   9 224   3   1   0   8   1  49]
 [ 29  23  18  22  46  27  28  45  44  18]
 [ 31  11   0  20  26  90  16  33  13  60]
 [ 20  13  29   2   4  10  80  84  53   5]
 [  5  27  29   9   7   8  41 134  31   9]
 [  8  14  26   6  23   8  26  33 149   7]
 [  5  18  14  70   9  12   9  52  24  87]]
----------
